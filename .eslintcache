[{"C:\\Users\\rareb\\coding-challenge\\src\\index.js":"1","C:\\Users\\rareb\\coding-challenge\\src\\Pages\\SiteList.js":"2","C:\\Users\\rareb\\coding-challenge\\src\\Pages\\SiteDetails.js":"3","C:\\Users\\rareb\\coding-challenge\\src\\App.js":"4","C:\\Users\\rareb\\coding-challenge\\src\\theme.js":"5","C:\\Users\\rareb\\coding-challenge\\src\\Styles\\SiteDetailsStyles.js":"6","C:\\Users\\rareb\\coding-challenge\\src\\Styles\\SiteListStyles.js":"7","C:\\Users\\rareb\\coding-challenge\\src\\Components\\Blank.js":"8","C:\\Users\\rareb\\coding-challenge\\src\\Components\\SiteOverviewTop.js":"9","C:\\Users\\rareb\\coding-challenge\\src\\Components\\SiteDetailsBottom.js":"10","C:\\Users\\rareb\\coding-challenge\\src\\Components\\ToolbarTertiary.js":"11","C:\\Users\\rareb\\coding-challenge\\src\\Components\\SiteListCard.js":"12","C:\\Users\\rareb\\coding-challenge\\src\\Styles\\AppStyles.js":"13","C:\\Users\\rareb\\coding-challenge\\src\\Components\\ToolbarPrimary.js":"14","C:\\Users\\rareb\\coding-challenge\\src\\Components\\ToolbarSecondary.js":"15"},{"size":398,"mtime":1607202570880,"results":"16","hashOfConfig":"17"},{"size":1150,"mtime":1607277527524,"results":"18","hashOfConfig":"17"},{"size":1026,"mtime":1607259235590,"results":"19","hashOfConfig":"17"},{"size":782,"mtime":1607294820655,"results":"20","hashOfConfig":"17"},{"size":493,"mtime":1607295251596,"results":"21","hashOfConfig":"17"},{"size":1456,"mtime":1607252208769,"results":"22","hashOfConfig":"17"},{"size":1653,"mtime":1607294899622,"results":"23","hashOfConfig":"17"},{"size":312,"mtime":1607250694029,"results":"24","hashOfConfig":"17"},{"size":4516,"mtime":1607266476447,"results":"25","hashOfConfig":"17"},{"size":6093,"mtime":1607252538704,"results":"26","hashOfConfig":"17"},{"size":647,"mtime":1607254427439,"results":"27","hashOfConfig":"17"},{"size":4867,"mtime":1607294076147,"results":"28","hashOfConfig":"17"},{"size":707,"mtime":1607278696517,"results":"29","hashOfConfig":"17"},{"size":1586,"mtime":1607294998233,"results":"30","hashOfConfig":"17"},{"size":600,"mtime":1607253391639,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"673ig",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\rareb\\coding-challenge\\src\\index.js",[],["69","70"],"C:\\Users\\rareb\\coding-challenge\\src\\Pages\\SiteList.js",[],"C:\\Users\\rareb\\coding-challenge\\src\\Pages\\SiteDetails.js",["71"],"import React, { useState, useEffect } from \"react\";\r\nimport useStylesSiteDetails from \"../Styles/SiteDetailsStyles\";\r\nimport Blank from \"../Components/Blank\";\r\nimport SiteOverviewTop from \"../Components/SiteOverviewTop\";\r\nimport SiteDetailsBottom from \"../Components/SiteDetailsBottom\";\r\n\r\n//fetch the details of selected site. Pass in match to the id to fetch data from that site.\r\n\r\nfunction SiteDetails({ match }) {\r\n    const classes = useStylesSiteDetails();\r\n    useEffect(() => {\r\n        fetchSite();\r\n    }, []);\r\n\r\n    const [site, setSite] = useState({});\r\n\r\n    const fetchSite = async () => {\r\n        const fetchSite = await fetch(\r\n            `http://localhost:4000/sites/${match.params.id}`\r\n        );\r\n        const site = await fetchSite.json();\r\n        setSite(site);\r\n    };\r\n    return (\r\n        <div className={classes.root}>\r\n            <SiteOverviewTop site={site} />\r\n            <Blank />\r\n            <SiteDetailsBottom site={site} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SiteDetails;\r\n","C:\\Users\\rareb\\coding-challenge\\src\\App.js",[],"C:\\Users\\rareb\\coding-challenge\\src\\theme.js",[],"C:\\Users\\rareb\\coding-challenge\\src\\Styles\\SiteDetailsStyles.js",[],["72","73"],"C:\\Users\\rareb\\coding-challenge\\src\\Styles\\SiteListStyles.js",[],"C:\\Users\\rareb\\coding-challenge\\src\\Components\\Blank.js",[],"C:\\Users\\rareb\\coding-challenge\\src\\Components\\SiteOverviewTop.js",["74","75","76"],"import useStylesSiteDetails from \"../Styles/SiteDetailsStyles\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\n\r\nfunction SiteOverviewTop({ site }) {\r\n    const classes = useStylesSiteDetails();\r\n    return (\r\n        <Paper className={classes.paper}>\r\n            <Grid container spacing={2} wrap=\"nowrap\">\r\n                <Link className={classes.link} to={`/`} key={site.id}>\r\n                    <ArrowBackIosIcon className={classes.forward} />\r\n                </Link>\r\n                <Grid item>\r\n                    <div className={classes.image}>\r\n                        <Avatar\r\n                            alt=\"Track\"\r\n                            className={classes.siteAvatar}\r\n                            src={\r\n                                site && site.images ? (\r\n                                    site.images[0]\r\n                                ) : (\r\n                                    <div>TT</div>\r\n                                )\r\n                            }\r\n                        ></Avatar>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} sm container wrap=\"nowrap\" zeroMinWidth>\r\n                    <Grid\r\n                        wrap=\"nowrap\"\r\n                        className={classes.mainContainer}\r\n                        item\r\n                        sm\r\n                        container\r\n                        direction=\"column\"\r\n                        spacing={2}\r\n                    >\r\n                        <Grid item sm wrap=\"nowrap\">\r\n                            <Typography\r\n                                gutterBottom\r\n                                variant=\"subtitle1\"\r\n                                className={classes.titleText}\r\n                            >\r\n                                {site && site.title ? (\r\n                                    <span>{site.title}</span>\r\n                                ) : (\r\n                                    <span>Site Name</span>\r\n                                )}\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" gutterBottom>\r\n                                <Typography\r\n                                    overflow=\"hidden\"\r\n                                    textOverflow=\"elipsis\"\r\n                                    className={classes.addressText}\r\n                                >\r\n                                    {site && site.address ? (\r\n                                        <Typography\r\n                                            noWrap\r\n                                            className={classes.addressText}\r\n                                        >\r\n                                            {site.address.street}\r\n                                            &nbsp;\r\n                                            {site.address.city}\r\n                                            &nbsp;\r\n                                            {site.address.state}\r\n                                            &nbsp;\r\n                                            {site.address.zipCode}\r\n                                        </Typography>\r\n                                    ) : (\r\n                                        <span>Site Address</span>\r\n                                    )}\r\n                                </Typography>\r\n                            </Typography>\r\n                            <Typography variant=\"body2\">\r\n                                {site && site.contacts ? (\r\n                                    <span>\r\n                                        {site.contacts.main.firstName}\r\n                                        &nbsp;\r\n                                        {site.contacts.main.lastName}\r\n                                    </span>\r\n                                ) : (\r\n                                    <span>Contact Name</span>\r\n                                )}\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default SiteOverviewTop;\r\n","C:\\Users\\rareb\\coding-challenge\\src\\Components\\SiteDetailsBottom.js",["77","78","79","80","81","82"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport SupervisorAccountIcon from \"@material-ui/icons/SupervisorAccount\";\r\nimport PhoneIcon from \"@material-ui/icons/Phone\";\r\nimport EmailIcon from \"@material-ui/icons/Email\";\r\nimport RoomIcon from \"@material-ui/icons/Room\";\r\nimport useStylesSiteDetails from \"../Styles/SiteDetailsStyles\";\r\n\r\nfunction SiteDetailsBottom({ site }) {\r\n    const classes = useStylesSiteDetails();\r\n    return (\r\n        <Grid\r\n            container\r\n            spacing={2}\r\n            wrap=\"nowrap\"\r\n            className={classes.bottom}\r\n            zeroMinWidth\r\n        >\r\n            <Grid\r\n                item\r\n                wrap=\"nowrap\"\r\n                zeroMinWidth\r\n                sm\r\n                xs={12}\r\n                className={classes.bottomItem}\r\n            >\r\n                {site && site.contacts ? (\r\n                    <span>\r\n                        <Typography\r\n                            variant=\"body2\"\r\n                            overflow=\"hidden\"\r\n                            textOverflow=\"elipsis\"\r\n                        >\r\n                            <IconButton className={classes.bottomIcon}>\r\n                                <SupervisorAccountIcon />\r\n                            </IconButton>\r\n                            {site.contacts.main.firstName}&nbsp;\r\n                            {site.contacts.main.lastName}\r\n                            <br></br>\r\n                            <span className={classes.jobTitle}>\r\n                                {site.contacts.main.jobTitle}\r\n                            </span>\r\n                        </Typography>\r\n                    </span>\r\n                ) : (\r\n                    <span>\r\n                        <IconButton className={classes.bottomIcon}>\r\n                            <SupervisorAccountIcon />\r\n                        </IconButton>\r\n                        Contact Info\r\n                    </span>\r\n                )}\r\n            </Grid>\r\n            <Grid\r\n                item\r\n                wrap=\"nowrap\"\r\n                zeroMinWidth\r\n                className={classes.bottomItem}\r\n            >\r\n                <Typography\r\n                    variant=\"body2\"\r\n                    overflow=\"hidden\"\r\n                    textOverflow=\"elipsis\"\r\n                >\r\n                    <IconButton className={classes.bottomIcon}>\r\n                        <PhoneIcon />\r\n                    </IconButton>\r\n\r\n                    {site && site.contacts ? (\r\n                        <span>{site.contacts.main.phoneNumber}</span>\r\n                    ) : (\r\n                        <span>Contact Phone</span>\r\n                    )}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item wrap=\"nowrap\" zeroMinWidth>\r\n                {site && site.contacts ? (\r\n                    <Typography\r\n                        variant=\"body2\"\r\n                        noWrap\r\n                        className={classes.addressText}\r\n                    >\r\n                        <IconButton className={classes.bottomIcon}>\r\n                            <EmailIcon />\r\n                        </IconButton>\r\n                        <span>{site.contacts.main.email}</span>\r\n                    </Typography>\r\n                ) : (\r\n                    <span>\r\n                        <IconButton className={classes.bottomIcon}>\r\n                            <EmailIcon />\r\n                        </IconButton>\r\n                        Contact Email\r\n                    </span>\r\n                )}\r\n            </Grid>\r\n            <Grid item wrap=\"nowrap\" zeroMinWidth direction=\"row\" spacing={2}>\r\n                <span>\r\n                    {site && site.contacts ? (\r\n                        <Typography variant=\"body2\" gutterBottom>\r\n                            <Typography\r\n                                overflow=\"hidden\"\r\n                                textOverflow=\"elipsis\"\r\n                                className={classes.addressText}\r\n                            >\r\n                                {site && site.address ? (\r\n                                    <Typography\r\n                                        variant=\"body2\"\r\n                                        noWrap\r\n                                        className={classes.addressText}\r\n                                    >\r\n                                        <IconButton\r\n                                            className={classes.bottomIcon}\r\n                                        >\r\n                                            <RoomIcon />\r\n                                        </IconButton>\r\n                                        {site.contacts.main.address.street}\r\n                                        &nbsp;\r\n                                        {site.contacts.main.address.city}\r\n                                        &nbsp;\r\n                                        {site.contacts.main.address.state}\r\n                                        &nbsp;\r\n                                        {site.contacts.main.address.zipCode}\r\n                                    </Typography>\r\n                                ) : (\r\n                                    <span>Contact Address</span>\r\n                                )}\r\n                            </Typography>\r\n                        </Typography>\r\n                    ) : (\r\n                        <span>\r\n                            <IconButton className={classes.bottomIcon}>\r\n                                <RoomIcon />\r\n                            </IconButton>\r\n                            Contact Address\r\n                        </span>\r\n                    )}\r\n                </span>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default SiteDetailsBottom;\r\n","C:\\Users\\rareb\\coding-challenge\\src\\Components\\ToolbarTertiary.js",[],"C:\\Users\\rareb\\coding-challenge\\src\\Components\\SiteListCard.js",["83","84"],"import useStylesSiteList from \"../Styles/SiteListStyles\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\n\r\nfunction SiteListCard({ site }) {\r\n    const classes = useStylesSiteList();\r\n    return (\r\n        <div className={classes.paper}>\r\n            <Grid container spacing={2} wrap=\"nowrap\">\r\n                <Grid item>\r\n                    <div className={classes.image}>\r\n                        <Avatar\r\n                            alt=\"Track\"\r\n                            style={{ height: \"60px\", width: \"60px\" }}\r\n                            className={classes.siteAvatar}\r\n                            src={\r\n                                site && site.images ? (\r\n                                    site.images[0]\r\n                                ) : (\r\n                                    <div>TT</div>\r\n                                )\r\n                            }\r\n                        ></Avatar>\r\n                    </div>\r\n                </Grid>\r\n                <Grid\r\n                    item\r\n                    xs={12}\r\n                    sm\r\n                    container\r\n                    wrap=\"nowrap\"\r\n                    zeroMinWidth\r\n                    className={classes.mainContainer}\r\n                >\r\n                    <Grid\r\n                        wrap=\"nowrap\"\r\n                        item\r\n                        sm\r\n                        container\r\n                        direction=\"column\"\r\n                        spacing={2}\r\n                    >\r\n                        <Grid item sm wrap=\"nowrap\">\r\n                            <Typography gutterBottom variant=\"subtitle1\">\r\n                                {site && site.title ? (\r\n                                    <span>{site.title}</span>\r\n                                ) : (\r\n                                    <span>Site Name</span>\r\n                                )}\r\n                            </Typography>\r\n                            <Typography variant=\"body2\" gutterBottom>\r\n                                <Typography\r\n                                    overflow=\"hidden\"\r\n                                    textOverflow=\"elipsis\"\r\n                                    className={classes.addressText}\r\n                                >\r\n                                    {site && site.address ? (\r\n                                        <Typography\r\n                                            noWrap\r\n                                            className={classes.addressText}\r\n                                        >\r\n                                            {site.address.street}\r\n                                            &nbsp;\r\n                                            {site.address.city}\r\n                                            &nbsp;\r\n                                            {site.address.state}\r\n                                            &nbsp;\r\n                                            {site.address.zipCode}\r\n                                        </Typography>\r\n                                    ) : (\r\n                                        <span>Site Address</span>\r\n                                    )}\r\n                                </Typography>\r\n                            </Typography>\r\n                            <Typography variant=\"body2\">\r\n                                {site && site.contacts ? (\r\n                                    <span>\r\n                                        {site.contacts.main.firstName}\r\n                                        &nbsp;\r\n                                        {site.contacts.main.lastName}\r\n                                    </span>\r\n                                ) : (\r\n                                    <span>Contact Name</span>\r\n                                )}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item wrap=\"nowrap\">\r\n                            <Typography\r\n                                variant=\"body2\"\r\n                                style={{ cursor: \"pointer\" }}\r\n                            ></Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Link\r\n                        className={classes.link}\r\n                        to={`/sites/${site.id}`}\r\n                        key={site.id}\r\n                    >\r\n                        <ArrowForwardIosIcon className={classes.forward} />\r\n                    </Link>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SiteListCard;\r\n","C:\\Users\\rareb\\coding-challenge\\src\\Styles\\AppStyles.js",[],"C:\\Users\\rareb\\coding-challenge\\src\\Components\\ToolbarPrimary.js",["85"],"import { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport AppsIcon from \"@material-ui/icons/Apps\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport useAppStyles from \"../Styles/AppStyles\";\r\n\r\nfunction ToolbarPrimary() {\r\n    const classes = useAppStyles();\r\n    return (\r\n        <AppBar className={classes.primaryAppBar} position=\"static\">\r\n            <Toolbar\r\n                className={classes.toolbar}\r\n                variant=\"dense\"\r\n                style={{ backgrounColor: \"blue\" }}\r\n            >\r\n                <IconButton\r\n                    edge=\"start\"\r\n                    className={classes.menuButton}\r\n                    color=\"inherit\"\r\n                    aria-label=\"menu\"\r\n                >\r\n                    <MenuIcon />\r\n                </IconButton>\r\n\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    Scheduling\r\n                </Typography>\r\n\r\n                <IconButton\r\n                    className={classes.menuButton}\r\n                    color=\"inherit\"\r\n                    aria-label=\"menu\"\r\n                >\r\n                    <AppsIcon />\r\n                    <Avatar className={classes.white}>D</Avatar>\r\n                </IconButton>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}\r\n\r\nexport default ToolbarPrimary;\r\n","C:\\Users\\rareb\\coding-challenge\\src\\Components\\ToolbarSecondary.js",["86","87","88"],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":13,"column":8,"nodeType":"95","endLine":13,"endColumn":10,"suggestions":"96"},{"ruleId":"89","replacedBy":"97"},{"ruleId":"91","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":4,"column":27,"nodeType":"101","messageId":"102","endLine":4,"endColumn":33},{"ruleId":"99","severity":1,"message":"103","line":4,"column":35,"nodeType":"101","messageId":"102","endLine":4,"endColumn":41},{"ruleId":"99","severity":1,"message":"104","line":4,"column":43,"nodeType":"101","messageId":"102","endLine":4,"endColumn":48},{"ruleId":"99","severity":1,"message":"105","line":1,"column":17,"nodeType":"101","messageId":"102","endLine":1,"endColumn":25},{"ruleId":"99","severity":1,"message":"106","line":1,"column":27,"nodeType":"101","messageId":"102","endLine":1,"endColumn":36},{"ruleId":"99","severity":1,"message":"107","line":2,"column":10,"nodeType":"101","messageId":"102","endLine":2,"endColumn":14},{"ruleId":"99","severity":1,"message":"100","line":3,"column":27,"nodeType":"101","messageId":"102","endLine":3,"endColumn":33},{"ruleId":"99","severity":1,"message":"103","line":3,"column":35,"nodeType":"101","messageId":"102","endLine":3,"endColumn":41},{"ruleId":"99","severity":1,"message":"104","line":3,"column":43,"nodeType":"101","messageId":"102","endLine":3,"endColumn":48},{"ruleId":"99","severity":1,"message":"105","line":2,"column":17,"nodeType":"101","messageId":"102","endLine":2,"endColumn":25},{"ruleId":"99","severity":1,"message":"106","line":2,"column":27,"nodeType":"101","messageId":"102","endLine":2,"endColumn":36},{"ruleId":"99","severity":1,"message":"108","line":1,"column":10,"nodeType":"101","messageId":"102","endLine":1,"endColumn":20},{"ruleId":"99","severity":1,"message":"105","line":1,"column":17,"nodeType":"101","messageId":"102","endLine":1,"endColumn":25},{"ruleId":"99","severity":1,"message":"106","line":1,"column":27,"nodeType":"101","messageId":"102","endLine":1,"endColumn":36},{"ruleId":"99","severity":1,"message":"107","line":2,"column":10,"nodeType":"101","messageId":"102","endLine":2,"endColumn":14},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchSite'. Either include it or remove the dependency array.","ArrayExpression",["111"],["109"],["110"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'Route' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'Link' is defined but never used.","'makeStyles' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"112","fix":"113"},"Update the dependencies array to be: [fetchSite]",{"range":"114","text":"115"},[517,519],"[fetchSite]"]